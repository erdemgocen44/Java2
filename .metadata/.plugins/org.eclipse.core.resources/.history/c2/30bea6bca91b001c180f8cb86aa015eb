package codeforlife.dal;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import codeforlife.contract.Employee;
import codeforlife.core.CoreHelper;
import codeforlife.interfaces.DALInterfaces;

public class EmployeeDAL  extends CoreHelper implements DALInterfaces<Employee>{

	Statement statement = null;
	Connection connection = null;
	ResultSet rs = null;
	
	@Override
	public boolean insert(Employee entity) throws SQLException {
		connection = getConnection();
		statement = connection.createStatement();
		boolean key = false;
		// INSERT INTO DIRECTORY VALUES(directory_seq.nextVal, 'Mehmet',
		// 'Ozbay','23232323', 'aligmail.com','lippstadt');
		String query = "INSERT INTO Employee VALUES(Employee_seq.nextVal,'" + entity.getEmployeeName()+ "','"
				+ entity.getEmployeeEmail() + "')";
		try {

			statement.executeUpdate(query);

			key = true;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			statement.close();
			connection.close();
		}
		return key;
		
	}

	@Override
	public List<Employee> getAll() throws SQLException {
		ArrayList<Employee> list = new ArrayList<>();
		connection = getConnection();
		String query = "select * from Employee";
		Employee  Employee;
		try {
			statement = connection.createStatement();
			rs = statement.executeQuery(query);
			while (rs.next()) {
				Employee = new Employee(rs.getInt("id"), rs.getString("employeeName"), rs.getString("employeeEmail"));
				list.add(Employee);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		 finally {
				connection.close();
				statement.close();
				rs.close();
			}

		return list;
		
	}

	@Override
	public boolean delete(int id) throws SQLException {
		connection = getConnection();
		String query = "delete from Employee where id=" + id;
		try {
			statement= connection.createStatement();
			statement.executeUpdate(query);
			return true;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		} finally {
			connection.close();
			statement.close();
		}
	}

	@Override
	public boolean update(Employee entity) throws SQLException {
		connection = getConnection();
		String query = "update Employee set employeeName='" + entity.getEmployeeName() + "', Employee_biography='" 
		+ entity.getEmployeeBiography()+ "' where id = " + entity.getId();
		//update Employee set employeeName='Ahmet', Employee_biography='ajsdhiasnd naosdjaosdksa' where id= 10
		
		System.out.println(query);
		try {
			statement= connection.createStatement();
			statement.executeUpdate(query);
			return true;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		} finally {
			connection.close();
			statement.close();
		}
		
	}

	@Override
	public List<Employee> getBySearch(String searchText) throws SQLException {
		ArrayList<Employee> list = new ArrayList<>();
		connection = getConnection();
		String query = "select * from Employee where lower(employeeName) like '%"+searchText.toLowerCase() +"%' or lower(Employee_biography) like '%"+searchText.toLowerCase() +"%'";
		
		Employee Employee;
		try {
			statement = connection.createStatement();
			
			rs = statement.executeQuery(query);
			while (rs.next()) {
				Employee = new Employee(rs.getInt("id"), rs.getString("employeeName"), rs.getString("Employee_biography"));
				list.add(Employee);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			connection.close();
			statement.close();
			rs.close();
		}
		return list;
	}

}
